$date
	Wed Mar  8 02:14:09 2023
$end
$version
	Icarus Verilog
$end
$timescale
	100ps
$end
$scope module tb $end
$var wire 32 ! result [31:0] $end
$var reg 1 " clk $end
$var reg 1 # clk_en $end
$var reg 32 $ dataa [31:0] $end
$var reg 1 % reset $end
$scope module unit $end
$var event 1 & _ivl_38 $end
$var wire 1 % aclr $end
$var wire 1 # clk_en $end
$var wire 1 " clock $end
$var wire 32 ' dataa [31:0] $end
$var wire 32 ( result_fp [31:0] $end
$var wire 32 ) result [31:0] $end
$var wire 21 * fixed_point_result [20:0] $end
$var wire 21 + fixed_point_input [20:0] $end
$var reg 21 , offsetX [20:0] $end
$var reg 21 - offsetY [20:0] $end
$var reg 21 . offsetZ [20:0] $end
$var reg 21 / rotateAngle [20:0] $end
$var reg 5 0 rotate_index [4:0] $end
$var reg 21 1 x [20:0] $end
$var reg 21 2 y [20:0] $end
$var reg 21 3 z [20:0] $end
$scope module fixed_to_float_unit $end
$var wire 21 4 fixed_point_result [20:0] $end
$var wire 5 5 leadingOneIndex [4:0] $end
$var wire 32 6 fixed_point_result_appended_to_32_bits [31:0] $end
$var wire 1 7 containOne_valid $end
$var reg 21 8 intermediate_result [20:0] $end
$var reg 8 9 result_exponent [7:0] $end
$var reg 32 : result_fp [31:0] $end
$var reg 23 ; result_significant [22:0] $end
$scope module encoder32 $end
$var wire 32 < encoder_input [31:0] $end
$var wire 1 = valid7 $end
$var wire 1 > valid6 $end
$var wire 1 ? valid5 $end
$var wire 1 @ valid4 $end
$var wire 1 A valid3 $end
$var wire 1 B valid2 $end
$var wire 1 C valid1 $end
$var wire 1 D valid0 $end
$var wire 1 7 valid $end
$var wire 3 E encoder_output8 [2:0] $end
$var wire 2 F encoder_output7 [1:0] $end
$var wire 2 G encoder_output6 [1:0] $end
$var wire 2 H encoder_output5 [1:0] $end
$var wire 2 I encoder_output4 [1:0] $end
$var wire 2 J encoder_output3 [1:0] $end
$var wire 2 K encoder_output2 [1:0] $end
$var wire 2 L encoder_output1 [1:0] $end
$var wire 2 M encoder_output0 [1:0] $end
$var wire 8 N encoder_input8 [7:0] $end
$var reg 4 O encoder_input0 [3:0] $end
$var reg 4 P encoder_input1 [3:0] $end
$var reg 4 Q encoder_input2 [3:0] $end
$var reg 4 R encoder_input3 [3:0] $end
$var reg 4 S encoder_input4 [3:0] $end
$var reg 4 T encoder_input5 [3:0] $end
$var reg 4 U encoder_input6 [3:0] $end
$var reg 4 V encoder_input7 [3:0] $end
$var reg 5 W encoder_output [4:0] $end
$scope module encoder0 $end
$var wire 4 X encoder_input [3:0] $end
$var reg 2 Y encoder_output [1:0] $end
$var reg 1 D valid $end
$upscope $end
$scope module encoder1 $end
$var wire 4 Z encoder_input [3:0] $end
$var reg 2 [ encoder_output [1:0] $end
$var reg 1 C valid $end
$upscope $end
$scope module encoder2 $end
$var wire 4 \ encoder_input [3:0] $end
$var reg 2 ] encoder_output [1:0] $end
$var reg 1 B valid $end
$upscope $end
$scope module encoder3 $end
$var wire 4 ^ encoder_input [3:0] $end
$var reg 2 _ encoder_output [1:0] $end
$var reg 1 A valid $end
$upscope $end
$scope module encoder4 $end
$var wire 4 ` encoder_input [3:0] $end
$var reg 2 a encoder_output [1:0] $end
$var reg 1 @ valid $end
$upscope $end
$scope module encoder5 $end
$var wire 4 b encoder_input [3:0] $end
$var reg 2 c encoder_output [1:0] $end
$var reg 1 ? valid $end
$upscope $end
$scope module encoder6 $end
$var wire 4 d encoder_input [3:0] $end
$var reg 2 e encoder_output [1:0] $end
$var reg 1 > valid $end
$upscope $end
$scope module encoder7 $end
$var wire 4 f encoder_input [3:0] $end
$var reg 2 g encoder_output [1:0] $end
$var reg 1 = valid $end
$upscope $end
$scope module encoder8 $end
$var wire 8 h encoder_input [7:0] $end
$var wire 1 i valid8_1 $end
$var wire 1 j valid8_0 $end
$var wire 2 k encoder_output8_1 [1:0] $end
$var wire 2 l encoder_output8_0 [1:0] $end
$var reg 4 m encoder_input8_0 [3:0] $end
$var reg 4 n encoder_input8_1 [3:0] $end
$var reg 3 o encoder_output [2:0] $end
$var reg 1 7 valid $end
$scope module encoder8_0 $end
$var wire 4 p encoder_input [3:0] $end
$var reg 2 q encoder_output [1:0] $end
$var reg 1 j valid $end
$upscope $end
$scope module encoder8_1 $end
$var wire 4 r encoder_input [3:0] $end
$var reg 2 s encoder_output [1:0] $end
$var reg 1 i valid $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module floating_to_fixed_unit $end
$var wire 32 t dataa [31:0] $end
$var wire 23 u significand [22:0] $end
$var wire 21 v fixed_point_input [20:0] $end
$var wire 8 w exponent [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b1111110 w
b10110011001100110011 v
b1100110011001100110011 u
b111111001100110011001100110011 t
b10 s
b0 r
b10 q
b0 p
b110 o
b0 n
b0 m
b10 l
b10 k
0j
0i
b0 h
b10 g
b0 f
b10 e
b0 d
b10 c
b0 b
b10 a
b0 `
b10 _
b0 ^
b10 ]
b0 \
b10 [
b0 Z
b10 Y
b0 X
bx W
b0 V
b0 U
b0 T
b0 S
b0 R
b0 Q
b0 P
b0 O
b0 N
b10 M
b10 L
b10 K
b10 J
b10 I
b10 H
b10 G
b10 F
b110 E
0D
0C
0B
0A
0@
0?
0>
0=
b0 <
bx000 ;
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxx000 :
bx 9
bx 8
07
b0 6
bx 5
b0 4
bx 3
bx 2
bx 1
bx 0
bx /
bx .
bx -
bx ,
b10110011001100110011 +
b0 *
b0 )
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxx000 (
b111111001100110011001100110011 '
1&
1%
b111111001100110011001100110011 $
0#
0"
b0 !
$end
#100
b100110110111100000001 .
b10011011011101001110 -
b0 ,
b11001001000011111101 /
b10110011001100110011 3
b0 2
b10011011011101001110 1
b0 0
1"
#200
1#
0%
0"
#300
b1110110101100011001 .
b110110010010001010111 -
b1001101101110100111 ,
b1110110101100011001 /
b111101010001000110100 3
b10011011011101001110 2
b1 0
1"
#400
0"
#500
b111000001010010010000 .
b111010010010111101 -
b111101100100100010111 ,
b111110101101101110 /
b1100000110101001101 3
b1001101101110100101 2
b11101001001011110101 1
b10 0
1"
#600
0"
#700
b111100000001010100011 .
b11010101110000001 -
b111101110111111110100 ,
b11111110101011011 /
b100010000111011101 3
b10001000000001100010 2
b11010101110000001100 1
b11 0
1"
#800
0"
#900
b111110000000001010100 .
b1100010011000000 -
b111110101110101000010 ,
b1111111110101010 /
b10010010000000 3
b10100010101111100011 2
b11000100110000000000 1
b100 0
1"
#1000
0"
#1100
b111111111110101 .
b111111010001010110100 -
b101011110000101 ,
b111111111110101 /
b111110010010011010100 3
b10101111000010100011 2
b10111010100101000010 1
b101 0
1"
#1200
0"
#1300
b11111111111110 .
b111111100111111111011 -
b10101001001101 ,
b11111111111110 /
b111111010010011001001 3
b10101001001101010111 2
b11000000000011000111 1
b110 0
1"
#1400
0"
#1500
b1111111111111 .
b111111110011110101000 -
b1010011000110 ,
b1111111111111 /
b111111110010011000111 3
b10100110001101010010 2
b11000010101100010100 1
b111 0
1"
#1600
0"
#1700
b111111110111111111111 .
b110000111111 -
b111111111010110110110 ,
b111111111111 /
b10011000110 3
b10100100101011111010 2
b11000011111111011010 1
b1000 0
1"
#1800
0"
#1900
b11111111111 .
b111111111100111100100 -
b10100101011 ,
b11111111111 /
b111111111010011000101 3
b10100101011100111001 2
b11000011010110010000 1
b1001 0
1"
#2000
0"
#2100
b1111111111 .
b111111111110011110000 -
b1010010100 ,
b1111111111 /
b111111111110011000100 3
b10100101000100011101 2
b11000011101010111011 1
b1010 0
1"
#2200
0"
#2300
b111111111110111111111 .
b110000111 -
b111111111111010110111 ,
b111111111 /
b11000011 3
b10100100111000001101 2
b11000011110101001111 1
b1011 0
1"
#2400
0"
#2500
b11111111 .
b111111111111100111011 -
b10100100 ,
b11111111 /
b111111111111011000010 3
b10100100111110010100 2
b11000011110000000110 1
b1100 0
1"
#2600
0"
#2700
b1111111 .
b111111111111110011101 -
b1010010 ,
b1111111 /
b111111111111111000001 3
b10100100111011001111 2
b11000011110010101010 1
b1101 0
1"
#2800
0"
#2900
b111111111111110111111 .
b110000 -
b111111111111111010111 ,
b111111 /
b1000000 3
b10100100111001101100 2
b11000011110011111100 1
b1110 0
1"
#3000
0"
#3100
b11111 .
b111111111111111100110 -
b10100 ,
b11111 /
b111111111111111111111 3
b10100100111010011100 2
b11000011110011010011 1
b1111 0
1"
#3200
0"
#3300
b111111010000111100111001110000 (
b111111010000111100111001110000 :
b10000111100111001110000 ;
b110000111100111001110 8
b1111110 9
b1 5
b1 W
17
b0 E
b0 o
1j
b0 l
b0 q
1i
b0 k
b0 s
b1111 m
b1111 p
b1100 n
b1100 r
1D
b1 M
b1 Y
1C
b11 L
b11 [
1B
b1 K
b1 ]
1A
b1 J
b1 _
1@
b11111100 N
b11111100 h
1?
b0 H
b0 c
b110 O
b110 X
b1 P
b1 Z
b111 Q
b111 \
b111 R
b111 ^
b11 S
b11 `
b1000 T
b1000 b
b1100001111001110011100000000000 6
b1100001111001110011100000000000 <
b11000011110011100111 *
b11000011110011100111 4
b111111010000111100111001110000 !
b111111010000111100111001110000 )
b111111111111111111110 .
b1100 -
b111111111111111110110 ,
b0 /
b11110 3
b10100100111010000010 2
b11000011110011100111 1
b10000 0
1"
#3600
                                                                                                                                                #3800
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            #4400
