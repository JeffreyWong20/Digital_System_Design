$date
	Wed Mar  8 22:07:16 2023
$end
$version
	Icarus Verilog
$end
$timescale
	100ps
$end
$scope module tb $end
$var wire 32 ! result [31:0] $end
$var wire 1 " done $end
$var reg 1 # clk $end
$var reg 1 $ clk_en $end
$var reg 32 % dataa [31:0] $end
$var reg 1 & reset $end
$var reg 1 ' start $end
$scope module unit $end
$var wire 1 & aclr $end
$var wire 1 $ clk_en $end
$var wire 1 # clock $end
$var wire 32 ( dataa [31:0] $end
$var wire 32 ) result [31:0] $end
$var wire 1 ' start $end
$var wire 32 * result_fp [31:0] $end
$var wire 21 + fixed_point_result [20:0] $end
$var wire 21 , fixed_point_input [20:0] $end
$var wire 1 " done $end
$var reg 21 - offsetX [20:0] $end
$var reg 21 . offsetY [20:0] $end
$var reg 21 / offsetZ [20:0] $end
$var reg 21 0 rotateAngle [20:0] $end
$var reg 5 1 rotate_index [4:0] $end
$var reg 21 2 x [20:0] $end
$var reg 21 3 y [20:0] $end
$var reg 21 4 z [20:0] $end
$scope module fixed_to_float_unit $end
$var wire 21 5 fixed_point_result [20:0] $end
$var wire 5 6 leadingOneIndex [4:0] $end
$var wire 32 7 fixed_point_result_appended_to_32_bits [31:0] $end
$var wire 1 8 containOne_valid $end
$var reg 21 9 intermediate_result [20:0] $end
$var reg 8 : result_exponent [7:0] $end
$var reg 32 ; result_fp [31:0] $end
$var reg 23 < result_significant [22:0] $end
$scope module encoder32 $end
$var wire 32 = encoder_input [31:0] $end
$var wire 1 > valid7 $end
$var wire 1 ? valid6 $end
$var wire 1 @ valid5 $end
$var wire 1 A valid4 $end
$var wire 1 B valid3 $end
$var wire 1 C valid2 $end
$var wire 1 D valid1 $end
$var wire 1 E valid0 $end
$var wire 1 8 valid $end
$var wire 3 F encoder_output8 [2:0] $end
$var wire 2 G encoder_output7 [1:0] $end
$var wire 2 H encoder_output6 [1:0] $end
$var wire 2 I encoder_output5 [1:0] $end
$var wire 2 J encoder_output4 [1:0] $end
$var wire 2 K encoder_output3 [1:0] $end
$var wire 2 L encoder_output2 [1:0] $end
$var wire 2 M encoder_output1 [1:0] $end
$var wire 2 N encoder_output0 [1:0] $end
$var wire 8 O encoder_input8 [7:0] $end
$var reg 4 P encoder_input0 [3:0] $end
$var reg 4 Q encoder_input1 [3:0] $end
$var reg 4 R encoder_input2 [3:0] $end
$var reg 4 S encoder_input3 [3:0] $end
$var reg 4 T encoder_input4 [3:0] $end
$var reg 4 U encoder_input5 [3:0] $end
$var reg 4 V encoder_input6 [3:0] $end
$var reg 4 W encoder_input7 [3:0] $end
$var reg 5 X encoder_output [4:0] $end
$scope module encoder0 $end
$var wire 4 Y encoder_input [3:0] $end
$var reg 2 Z encoder_output [1:0] $end
$var reg 1 E valid $end
$upscope $end
$scope module encoder1 $end
$var wire 4 [ encoder_input [3:0] $end
$var reg 2 \ encoder_output [1:0] $end
$var reg 1 D valid $end
$upscope $end
$scope module encoder2 $end
$var wire 4 ] encoder_input [3:0] $end
$var reg 2 ^ encoder_output [1:0] $end
$var reg 1 C valid $end
$upscope $end
$scope module encoder3 $end
$var wire 4 _ encoder_input [3:0] $end
$var reg 2 ` encoder_output [1:0] $end
$var reg 1 B valid $end
$upscope $end
$scope module encoder4 $end
$var wire 4 a encoder_input [3:0] $end
$var reg 2 b encoder_output [1:0] $end
$var reg 1 A valid $end
$upscope $end
$scope module encoder5 $end
$var wire 4 c encoder_input [3:0] $end
$var reg 2 d encoder_output [1:0] $end
$var reg 1 @ valid $end
$upscope $end
$scope module encoder6 $end
$var wire 4 e encoder_input [3:0] $end
$var reg 2 f encoder_output [1:0] $end
$var reg 1 ? valid $end
$upscope $end
$scope module encoder7 $end
$var wire 4 g encoder_input [3:0] $end
$var reg 2 h encoder_output [1:0] $end
$var reg 1 > valid $end
$upscope $end
$scope module encoder8 $end
$var wire 8 i encoder_input [7:0] $end
$var wire 1 j valid8_1 $end
$var wire 1 k valid8_0 $end
$var wire 2 l encoder_output8_1 [1:0] $end
$var wire 2 m encoder_output8_0 [1:0] $end
$var reg 4 n encoder_input8_0 [3:0] $end
$var reg 4 o encoder_input8_1 [3:0] $end
$var reg 3 p encoder_output [2:0] $end
$var reg 1 8 valid $end
$scope module encoder8_0 $end
$var wire 4 q encoder_input [3:0] $end
$var reg 2 r encoder_output [1:0] $end
$var reg 1 k valid $end
$upscope $end
$scope module encoder8_1 $end
$var wire 4 s encoder_input [3:0] $end
$var reg 2 t encoder_output [1:0] $end
$var reg 1 j valid $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module floating_to_fixed_unit $end
$var wire 32 u dataa [31:0] $end
$var wire 23 v significand [22:0] $end
$var wire 21 w fixed_point_input [20:0] $end
$var wire 8 x exponent [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
bx x
bx w
bx v
bx u
b10 t
b0 s
b10 r
b0 q
b110 p
b0 o
b0 n
b10 m
b10 l
0k
0j
b0 i
b10 h
b0 g
b10 f
b0 e
b10 d
b0 c
b10 b
b0 a
b10 `
b0 _
b10 ^
b0 ]
b10 \
b0 [
b10 Z
b0 Y
bx X
b0 W
b0 V
b0 U
b0 T
b0 S
b0 R
b0 Q
b0 P
b0 O
b10 N
b10 M
b10 L
b10 K
b10 J
b10 I
b10 H
b10 G
b110 F
0E
0D
0C
0B
0A
0@
0?
0>
b0 =
bx000 <
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxx000 ;
bx :
bx 9
08
b0 7
bx 6
b0 5
bx 4
bx 3
bx 2
bx 1
bx 0
bx /
bx .
bx -
bx ,
b0 +
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxx000 *
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxx000 )
bx (
0'
1&
bx %
0$
0#
x"
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxx000 !
$end
#100
b100110110111100000001 /
b10011011011101001110 .
b0 -
b11001001000011111101 0
b0 4
b0 3
b10011011011101001110 2
0"
b0 1
1#
#200
b10000000000000000000 ,
b10000000000000000000 w
b1111110 x
b0 v
b111111000000000000000000000000 %
b111111000000000000000000000000 (
b111111000000000000000000000000 u
1'
0&
1$
0#
#300
b10000000000000000000 4
1#
#400
0'
0#
#500
b1110110101100011001 /
b110110010010001010111 .
b1001101101110100111 -
b1110110101100011001 0
b110110110111100000001 4
b10011011011101001110 3
b1 1
1#
#600
0#
#700
b111000001010010010000 /
b111010010010111101 .
b111101100100100010111 -
b111110101101101110 0
b101101101000011010 4
b1001101101110100101 3
b11101001001011110101 2
b10 1
1#
#800
0#
#900
b11111110101011011 /
b111100101010001111101 .
b10001000000001100 -
b11111110101011011 0
b111101110111010101010 4
b10001000000001100010 3
b11010101110000001100 2
b11 1
1#
#1000
0#
#1100
b111110000000001010100 /
b1110011011000001 .
b111111001001010110011 -
b1111111110101010 0
b1110110000000101 4
b1101101010011011111 3
b11100110110000011000 2
b100 1
1#
#1200
0#
#1300
b111111111110101 /
b111111001000000001000 .
b11110111011101 -
b111111111110101 0
b111111110110001011001 4
b1111011101110100000 3
b11011111111011001011 2
b101 1
1#
#1400
0#
#1500
b111111100000000000000 /
b11100011110010 .
b111111110001011010010 -
b11111111111110 0
b110110001001110 4
b1110100101110101000 3
b11100011110010101000 2
b110 1
1#
#1600
0#
#1700
b111111101111111111111 /
b1110000111110 .
b111111111000011110111 -
b1111111111111 0
b10110001001110 4
b1111000010010011010 3
b11100001111101111010 2
b111 1
1#
#1800
0#
#1900
b111111110111111111111 /
b111000010000 .
b111111111100001100000 -
b111111111111 0
b110001001101 4
b1111010000011011000 3
b11100001000001110001 2
b1000 1
1#
#2000
0#
#2100
b11111111111 /
b111111111100011111010 .
b1111010111 -
b11111111111 0
b111111111110001001100 4
b1111010111011101000 3
b11100000100011010001 2
b1001 1
1#
#2200
0#
#2300
b111111111101111111111 /
b1110000011 .
b111111111111000010111 -
b1111111111 0
b10001001011 4
b1111010011111100010 3
b11100000110010101000 2
b1010 1
1#
#2400
0#
#2500
b111111111110111111111 /
b111000001 .
b111111111111100001011 -
b111111111 0
b1001010 4
b1111010101101100101 3
b11100000101010111111 2
b1011 1
1#
#2600
0#
#2700
b11111111 /
b111111111111100011110 .
b1111010 -
b11111111 0
b111111111111001001001 4
b1111010110100100110 3
b11100000100111001010 2
b1100 1
1#
#2800
0#
#2900
b1111111 /
b111111111111110001110 .
b111101 -
b1111111 0
b111111111111101001000 4
b1111010110001000100 3
b11100000101001000100 2
b1101 1
1#
#3000
0#
#3100
b111111 /
b111111111111111000110 .
b11110 -
b111111 0
b111111111111111000111 4
b1111010101111010010 3
b11100000101010000001 2
b1110 1
1#
#3200
0#
#3300
b111111111111111011111 /
b11100 .
b111111111111111110001 -
b11111 0
b110 4
b1111010101110011000 3
b11100000101010011111 2
b1111 1
1#
#3400
0#
#3500
b111111011000001010100100000000 !
b111111011000001010100100000000 )
b111111011000001010100100000000 *
b111111011000001010100100000000 ;
b11000001010100100000000 <
b111000001010100100000 9
b1111110 :
b1 6
b1 X
18
b0 F
b0 p
1k
b0 m
b0 r
1j
b0 l
b0 t
b1011 n
b1011 q
b1000 o
b1000 s
1E
b1 N
b1 Z
1C
1B
b1 K
b1 `
b10111000 O
b10111000 i
1A
b0 J
b0 b
b111 P
b111 Y
b10 R
b10 ]
b100 S
b100 _
b1000 T
b1000 a
b1110000010101001000000000000000 7
b1110000010101001000000000000000 =
b11100000101010010000 +
b11100000101010010000 5
b0 /
b111111111111111110000 .
b111 -
b0 0
b111111111111111100101 4
b1111010101110110100 3
b11100000101010010000 2
1"
b10000 1
1#
#3600
0#
#3700
08
b110 F
b110 p
0k
b10 m
b10 r
0j
b10 l
b10 t
b0 n
b0 q
b0 o
b0 s
0E
b10 N
b10 Z
0C
0B
b10 K
b10 `
b0 O
b0 i
0A
b10 J
b10 b
b111111000000000000000000000000 !
b111111000000000000000000000000 )
b111111000000000000000000000000 *
b111111000000000000000000000000 ;
b0 <
b0 9
b0 P
b0 Y
b0 R
b0 ]
b0 S
b0 _
b0 T
b0 a
b0 7
b0 =
b0 +
b0 5
b111111111111111110111 .
b11 -
b1111010101110100100 3
b11100000101010010111 2
0"
b10001 1
1#
#3800
0#
#3900
b111111111111111111011 .
b1 -
b1111010101110011011 3
b11100000101010011010 2
b10010 1
1#
#4000
0#
#4100
b111111111111111111101 .
b0 -
b1111010101110010110 3
b11100000101010011011 2
b10011 1
1#
#4200
0#
#4300
b111111111111111111110 .
b1111010101110010011 3
b10100 1
1#
